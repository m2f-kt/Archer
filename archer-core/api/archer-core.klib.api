// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <com.m2f-kt:archer-core>
abstract class com.m2f.archer.configuration/Configuration { // com.m2f.archer.configuration/Configuration|null[0]
    abstract val cache // com.m2f.archer.configuration/Configuration.cache|{}cache[0]
        abstract fun <get-cache>(): com.m2f.archer.crud.cache/CacheDataSource<com.m2f.archer.crud.cache.memcache/CacheMetaInformation, kotlinx.datetime/Instant> // com.m2f.archer.configuration/Configuration.cache.<get-cache>|<get-cache>(){}[0]
    abstract val mainFallbacks // com.m2f.archer.configuration/Configuration.mainFallbacks|{}mainFallbacks[0]
        abstract fun <get-mainFallbacks>(): kotlin/Function1<com.m2f.archer.failure/Failure, kotlin/Boolean> // com.m2f.archer.configuration/Configuration.mainFallbacks.<get-mainFallbacks>|<get-mainFallbacks>(){}[0]
    abstract val storageFallbacks // com.m2f.archer.configuration/Configuration.storageFallbacks|{}storageFallbacks[0]
        abstract fun <get-storageFallbacks>(): kotlin/Function1<com.m2f.archer.failure/Failure, kotlin/Boolean> // com.m2f.archer.configuration/Configuration.storageFallbacks.<get-storageFallbacks>|<get-storageFallbacks>(){}[0]
    constructor <init>() // com.m2f.archer.configuration/Configuration.<init>|<init>(){}[0]
    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/Get<#A1>, #B1>).fallbackWith(com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/KeyQuery<#A1, out #B1>, #B1>): com.m2f.archer.repository/Repository<com.m2f.archer.failure/Failure, com.m2f.archer.query/Get<#A1>, #B1> // com.m2f.archer.configuration/Configuration.fallbackWith|fallbackWith@com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.Get<0:0>,0:1>(com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.KeyQuery<0:0,out|0:1>,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: reified kotlin/Any?> (com.m2f.archer.crud/StrategyBuilder<#A1, #B1>).expires(com.m2f.archer.crud.cache/CacheExpiration): com.m2f.archer.crud/GetRepositoryStrategy<#A1, #B1> // com.m2f.archer.configuration/Configuration.expires|expires@com.m2f.archer.crud.StrategyBuilder<0:0,0:1>(com.m2f.archer.crud.cache.CacheExpiration){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: reified kotlin/Any?> (com.m2f.archer.crud/StrategyBuilder<#A1, #B1>).expiresIn(kotlin.time/Duration): com.m2f.archer.crud/GetRepositoryStrategy<#A1, #B1> // com.m2f.archer.configuration/Configuration.expiresIn|expiresIn@com.m2f.archer.crud.StrategyBuilder<0:0,0:1>(kotlin.time.Duration){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: reified kotlin/Any?> (com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/Get<#A1>, #B1>).cache(com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/KeyQuery<#A1, out #B1>, #B1> = ..., com.m2f.archer.crud.cache/CacheExpiration = ...): com.m2f.archer.crud/GetRepositoryStrategy<#A1, #B1> // com.m2f.archer.configuration/Configuration.cache|cache@com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.Get<0:0>,0:1>(com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.KeyQuery<0:0,out|0:1>,0:1>;com.m2f.archer.crud.cache.CacheExpiration){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> bool(kotlin/Function1<com.m2f.archer.crud/ArcherRaise, #A1>): kotlin/Boolean // com.m2f.archer.configuration/Configuration.bool|bool(kotlin.Function1<com.m2f.archer.crud.ArcherRaise,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> either(kotlin/Function1<com.m2f.archer.crud/ArcherRaise, #A1>): arrow.core/Either<com.m2f.archer.failure/Failure, #A1> // com.m2f.archer.configuration/Configuration.either|either(kotlin.Function1<com.m2f.archer.crud.ArcherRaise,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> ice(kotlin/Function1<com.m2f.archer.crud/ArcherRaise, #A1>): com.m2f.archer.crud/Ice<#A1> // com.m2f.archer.configuration/Configuration.ice|ice(kotlin.Function1<com.m2f.archer.crud.ArcherRaise,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> nil(kotlin/Function1<com.m2f.archer.crud/ArcherRaise, #A1>): #A1? // com.m2f.archer.configuration/Configuration.nil|nil(kotlin.Function1<com.m2f.archer.crud.ArcherRaise,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> nullable(kotlin/Function1<com.m2f.archer.crud/ArcherRaise, #A1>): #A1? // com.m2f.archer.configuration/Configuration.nullable|nullable(kotlin.Function1<com.m2f.archer.crud.ArcherRaise,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> option(kotlin/Function1<com.m2f.archer.crud/ArcherRaise, #A1>): arrow.core/Option<#A1> // com.m2f.archer.configuration/Configuration.option|option(kotlin.Function1<com.m2f.archer.crud.ArcherRaise,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> result(kotlin/Function1<com.m2f.archer.crud/ArcherRaise, #A1>): arrow.core/Either<com.m2f.archer.failure/Failure, #A1> // com.m2f.archer.configuration/Configuration.result|result(kotlin.Function1<com.m2f.archer.crud.ArcherRaise,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> unit(kotlin/Function1<com.m2f.archer.crud/ArcherRaise, #A1>) // com.m2f.archer.configuration/Configuration.unit|unit(kotlin.Function1<com.m2f.archer.crud.ArcherRaise,0:0>){0§<kotlin.Any?>}[0]
}
abstract fun interface <#A: kotlin/Any?, #B: out kotlin/Any?> com.m2f.archer.crud/GetRepositoryStrategy { // com.m2f.archer.crud/GetRepositoryStrategy|null[0]
    abstract fun create(com.m2f.archer.crud.operation/Operation): com.m2f.archer.repository/Repository<com.m2f.archer.failure/Failure, com.m2f.archer.query/Get<#A>, #B> // com.m2f.archer.crud/GetRepositoryStrategy.create|create(com.m2f.archer.crud.operation.Operation){}[0]
}
abstract fun interface <#A: kotlin/Any?> com.m2f.archer.crud/DeleteDataSource { // com.m2f.archer.crud/DeleteDataSource|null[0]
    abstract suspend fun (com.m2f.archer.crud/ArcherRaise).delete(com.m2f.archer.query/Delete<#A>) // com.m2f.archer.crud/DeleteDataSource.delete|delete@com.m2f.archer.crud.ArcherRaise(com.m2f.archer.query.Delete<1:0>){}[0]
}
abstract fun interface <#A: out kotlin/Any?, #B: in kotlin/Any?, #C: out kotlin/Any?> com.m2f.archer.datasource/DataSource { // com.m2f.archer.datasource/DataSource|null[0]
    abstract suspend fun (com.m2f.archer.crud/ArcherRaise).invoke(#B): #C // com.m2f.archer.datasource/DataSource.invoke|invoke@com.m2f.archer.crud.ArcherRaise(1:1){}[0]
}
abstract interface <#A: kotlin/Any?, #B: kotlin/Any?> com.m2f.archer.crud.cache/CacheDataSource : com.m2f.archer.crud/DeleteDataSource<#A>, com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/KeyQuery<#A, out #B>, #B> // com.m2f.archer.crud.cache/CacheDataSource|null[0]
abstract interface <#A: kotlin/Any?, #B: kotlin/Any?> com.m2f.archer.mapper/Bijection { // com.m2f.archer.mapper/Bijection|null[0]
    abstract fun from(#A): #B // com.m2f.archer.mapper/Bijection.from|from(1:0){}[0]
    abstract fun to(#B): #A // com.m2f.archer.mapper/Bijection.to|to(1:1){}[0]
}
final class <#A: kotlin/Any?, #B: in kotlin/Any?, #C: out kotlin/Any?> com.m2f.archer.repository/SingleDataSourceRepository : com.m2f.archer.repository/Repository<#A, #B, #C> { // com.m2f.archer.repository/SingleDataSourceRepository|null[0]
    constructor <init>(com.m2f.archer.datasource/DataSource<#A, #B, #C>) // com.m2f.archer.repository/SingleDataSourceRepository.<init>|<init>(com.m2f.archer.datasource.DataSource<1:0,1:1,1:2>){}[0]
    final suspend fun (com.m2f.archer.crud/ArcherRaise).invoke(#B): #C // com.m2f.archer.repository/SingleDataSourceRepository.invoke|invoke@com.m2f.archer.crud.ArcherRaise(1:1){}[0]
}
final class <#A: kotlin/Any?, #B: kotlin/Any?> com.m2f.archer.crud/StrategyBuilder { // com.m2f.archer.crud/StrategyBuilder|null[0]
    constructor <init>(com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/Get<#A>, #B>, com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/KeyQuery<#A, out #B>, #B>) // com.m2f.archer.crud/StrategyBuilder.<init>|<init>(com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.Get<1:0>,1:1>;com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.KeyQuery<1:0,out|1:1>,1:1>){}[0]
    final val mainDataSource // com.m2f.archer.crud/StrategyBuilder.mainDataSource|{}mainDataSource[0]
        final fun <get-mainDataSource>(): com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/Get<#A>, #B> // com.m2f.archer.crud/StrategyBuilder.mainDataSource.<get-mainDataSource>|<get-mainDataSource>(){}[0]
    final val storeDataSource // com.m2f.archer.crud/StrategyBuilder.storeDataSource|{}storeDataSource[0]
        final fun <get-storeDataSource>(): com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/KeyQuery<#A, out #B>, #B> // com.m2f.archer.crud/StrategyBuilder.storeDataSource.<get-storeDataSource>|<get-storeDataSource>(){}[0]
}
final class <#A: kotlin/Any?, #B: kotlin/Any?> com.m2f.archer.datasource/InMemoryDataSource : com.m2f.archer.crud.cache/CacheDataSource<#A, #B> { // com.m2f.archer.datasource/InMemoryDataSource|null[0]
    constructor <init>(kotlin.collections/Map<#A, #B> = ...) // com.m2f.archer.datasource/InMemoryDataSource.<init>|<init>(kotlin.collections.Map<1:0,1:1>){}[0]
    final suspend fun (com.m2f.archer.crud/ArcherRaise).delete(com.m2f.archer.query/Delete<#A>) // com.m2f.archer.datasource/InMemoryDataSource.delete|delete@com.m2f.archer.crud.ArcherRaise(com.m2f.archer.query.Delete<1:0>){}[0]
    final suspend fun (com.m2f.archer.crud/ArcherRaise).invoke(com.m2f.archer.query/KeyQuery<#A, out #B>): #B // com.m2f.archer.datasource/InMemoryDataSource.invoke|invoke@com.m2f.archer.crud.ArcherRaise(com.m2f.archer.query.KeyQuery<1:0,out|1:1>){}[0]
}
final class <#A: kotlin/Any?, #B: kotlin/Any?> com.m2f.archer.query/Put : com.m2f.archer.query/KeyQuery<#A, #B> { // com.m2f.archer.query/Put|null[0]
    constructor <init>(#A, #B?) // com.m2f.archer.query/Put.<init>|<init>(1:0;1:1?){}[0]
    final fun component1(): #A // com.m2f.archer.query/Put.component1|component1(){}[0]
    final fun component2(): #B? // com.m2f.archer.query/Put.component2|component2(){}[0]
    final fun copy(#A = ..., #B? = ...): com.m2f.archer.query/Put<#A, #B> // com.m2f.archer.query/Put.copy|copy(1:0;1:1?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.query/Put.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.m2f.archer.query/Put.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.m2f.archer.query/Put.toString|toString(){}[0]
    final val key // com.m2f.archer.query/Put.key|{}key[0]
        final fun <get-key>(): #A // com.m2f.archer.query/Put.key.<get-key>|<get-key>(){}[0]
    final val value // com.m2f.archer.query/Put.value|{}value[0]
        final fun <get-value>(): #B? // com.m2f.archer.query/Put.value.<get-value>|<get-value>(){}[0]
}
final class <#A: kotlin/Any?, #B: kotlin/Any?> com.m2f.archer.repository/MainSyncRepository : com.m2f.archer.repository/Repository<com.m2f.archer.failure/Failure, com.m2f.archer.query/Get<#A>, #B> { // com.m2f.archer.repository/MainSyncRepository|null[0]
    constructor <init>(com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/Get<#A>, #B>, com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/KeyQuery<#A, out #B>, #B>, kotlin/Function1<com.m2f.archer.failure/Failure, kotlin/Boolean> = ...) // com.m2f.archer.repository/MainSyncRepository.<init>|<init>(com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.Get<1:0>,1:1>;com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.KeyQuery<1:0,out|1:1>,1:1>;kotlin.Function1<com.m2f.archer.failure.Failure,kotlin.Boolean>){}[0]
    final suspend fun (com.m2f.archer.crud/ArcherRaise).invoke(com.m2f.archer.query/Get<#A>): #B // com.m2f.archer.repository/MainSyncRepository.invoke|invoke@com.m2f.archer.crud.ArcherRaise(com.m2f.archer.query.Get<1:0>){}[0]
}
final class <#A: kotlin/Any?, #B: kotlin/Any?> com.m2f.archer.repository/StoreSyncRepository : com.m2f.archer.repository/Repository<com.m2f.archer.failure/Failure, com.m2f.archer.query/Get<#A>, #B> { // com.m2f.archer.repository/StoreSyncRepository|null[0]
    constructor <init>(com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/KeyQuery<#A, out #B>, #B>, com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/Get<#A>, #B>, kotlin/Function1<com.m2f.archer.failure/Failure, kotlin/Boolean> = ..., kotlin/Function1<com.m2f.archer.failure/Failure, kotlin/Boolean> = ...) // com.m2f.archer.repository/StoreSyncRepository.<init>|<init>(com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.KeyQuery<1:0,out|1:1>,1:1>;com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.Get<1:0>,1:1>;kotlin.Function1<com.m2f.archer.failure.Failure,kotlin.Boolean>;kotlin.Function1<com.m2f.archer.failure.Failure,kotlin.Boolean>){}[0]
    final suspend fun (com.m2f.archer.crud/ArcherRaise).invoke(com.m2f.archer.query/Get<#A>): #B // com.m2f.archer.repository/StoreSyncRepository.invoke|invoke@com.m2f.archer.crud.ArcherRaise(com.m2f.archer.query.Get<1:0>){}[0]
}
final class <#A: kotlin/Any?> com.m2f.archer.query/Delete : com.m2f.archer.query/Query<#A> { // com.m2f.archer.query/Delete|null[0]
    constructor <init>(#A) // com.m2f.archer.query/Delete.<init>|<init>(1:0){}[0]
    final fun component1(): #A // com.m2f.archer.query/Delete.component1|component1(){}[0]
    final fun copy(#A = ...): com.m2f.archer.query/Delete<#A> // com.m2f.archer.query/Delete.copy|copy(1:0){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.query/Delete.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.m2f.archer.query/Delete.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.m2f.archer.query/Delete.toString|toString(){}[0]
    final val key // com.m2f.archer.query/Delete.key|{}key[0]
        final fun <get-key>(): #A // com.m2f.archer.query/Delete.key.<get-key>|<get-key>(){}[0]
}
final class <#A: kotlin/Any?> com.m2f.archer.query/Get : com.m2f.archer.query/KeyQuery<#A, kotlin/Nothing> { // com.m2f.archer.query/Get|null[0]
    constructor <init>(#A) // com.m2f.archer.query/Get.<init>|<init>(1:0){}[0]
    final fun component1(): #A // com.m2f.archer.query/Get.component1|component1(){}[0]
    final fun copy(#A = ...): com.m2f.archer.query/Get<#A> // com.m2f.archer.query/Get.copy|copy(1:0){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.query/Get.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.m2f.archer.query/Get.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.m2f.archer.query/Get.toString|toString(){}[0]
    final val key // com.m2f.archer.query/Get.key|{}key[0]
        final fun <get-key>(): #A // com.m2f.archer.query/Get.key.<get-key>|<get-key>(){}[0]
}
final class com.m2f.archer.crud.cache.memcache/CacheMetaInformation { // com.m2f.archer.crud.cache.memcache/CacheMetaInformation|null[0]
    constructor <init>(kotlin/String, kotlin/String) // com.m2f.archer.crud.cache.memcache/CacheMetaInformation.<init>|<init>(kotlin.String;kotlin.String){}[0]
    final fun component1(): kotlin/String // com.m2f.archer.crud.cache.memcache/CacheMetaInformation.component1|component1(){}[0]
    final fun component2(): kotlin/String // com.m2f.archer.crud.cache.memcache/CacheMetaInformation.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ...): com.m2f.archer.crud.cache.memcache/CacheMetaInformation // com.m2f.archer.crud.cache.memcache/CacheMetaInformation.copy|copy(kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.crud.cache.memcache/CacheMetaInformation.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.m2f.archer.crud.cache.memcache/CacheMetaInformation.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.m2f.archer.crud.cache.memcache/CacheMetaInformation.toString|toString(){}[0]
    final val classIdentifier // com.m2f.archer.crud.cache.memcache/CacheMetaInformation.classIdentifier|{}classIdentifier[0]
        final fun <get-classIdentifier>(): kotlin/String // com.m2f.archer.crud.cache.memcache/CacheMetaInformation.classIdentifier.<get-classIdentifier>|<get-classIdentifier>(){}[0]
    final val key // com.m2f.archer.crud.cache.memcache/CacheMetaInformation.key|{}key[0]
        final fun <get-key>(): kotlin/String // com.m2f.archer.crud.cache.memcache/CacheMetaInformation.key.<get-key>|<get-key>(){}[0]
}
final class com.m2f.archer.crud.cache.memcache/MemoizedExpirationCache : com.m2f.archer.crud.cache/CacheDataSource<com.m2f.archer.crud.cache.memcache/CacheMetaInformation, kotlinx.datetime/Instant> { // com.m2f.archer.crud.cache.memcache/MemoizedExpirationCache|null[0]
    constructor <init>(com.m2f.archer.repository/Repository<com.m2f.archer.failure/Failure, com.m2f.archer.query/Get<kotlin/Unit>, com.m2f.archer/ExpirationRegistryQueries> = ...) // com.m2f.archer.crud.cache.memcache/MemoizedExpirationCache.<init>|<init>(com.m2f.archer.repository.Repository<com.m2f.archer.failure.Failure,com.m2f.archer.query.Get<kotlin.Unit>,com.m2f.archer.ExpirationRegistryQueries>){}[0]
    final suspend fun (com.m2f.archer.crud/ArcherRaise).delete(com.m2f.archer.query/Delete<com.m2f.archer.crud.cache.memcache/CacheMetaInformation>) // com.m2f.archer.crud.cache.memcache/MemoizedExpirationCache.delete|delete@com.m2f.archer.crud.ArcherRaise(com.m2f.archer.query.Delete<com.m2f.archer.crud.cache.memcache.CacheMetaInformation>){}[0]
    final suspend fun (com.m2f.archer.crud/ArcherRaise).invoke(com.m2f.archer.query/KeyQuery<com.m2f.archer.crud.cache.memcache/CacheMetaInformation, out kotlinx.datetime/Instant>): kotlinx.datetime/Instant // com.m2f.archer.crud.cache.memcache/MemoizedExpirationCache.invoke|invoke@com.m2f.archer.crud.ArcherRaise(com.m2f.archer.query.KeyQuery<com.m2f.archer.crud.cache.memcache.CacheMetaInformation,out|kotlinx.datetime.Instant>){}[0]
}
final class com.m2f.archer.crud/ArcherRaise : arrow.core.raise/Raise<com.m2f.archer.failure/Failure>, com.m2f.archer.configuration/Configuration { // com.m2f.archer.crud/ArcherRaise|null[0]
    constructor <init>(arrow.core.raise/Raise<com.m2f.archer.failure/Failure>, com.m2f.archer.configuration/Configuration) // com.m2f.archer.crud/ArcherRaise.<init>|<init>(arrow.core.raise.Raise<com.m2f.archer.failure.Failure>;com.m2f.archer.configuration.Configuration){}[0]
    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (kotlin.collections/Map<#A1, arrow.core/Either<com.m2f.archer.failure/Failure, #B1>>).bindAll(): kotlin.collections/Map<#A1, #B1> // com.m2f.archer.crud/ArcherRaise.bindAll|bindAll@kotlin.collections.Map<0:0,arrow.core.Either<com.m2f.archer.failure.Failure,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (#A1?).bind(): #A1 // com.m2f.archer.crud/ArcherRaise.bind|bind@0:0?(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/Either<com.m2f.archer.failure/Failure, #A1>).bind(): #A1 // com.m2f.archer.crud/ArcherRaise.bind|bind@arrow.core.Either<com.m2f.archer.failure.Failure,0:0>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/NonEmptyList<arrow.core/Either<com.m2f.archer.failure/Failure, #A1>>).bindAll(): arrow.core/NonEmptyList<#A1> // com.m2f.archer.crud/ArcherRaise.bindAll|bindAll@arrow.core.NonEmptyList<arrow.core.Either<com.m2f.archer.failure.Failure,0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/NonEmptySet<arrow.core/Either<com.m2f.archer.failure/Failure, #A1>>).bindAll(): arrow.core/NonEmptySet<#A1> // com.m2f.archer.crud/ArcherRaise.bindAll|bindAll@arrow.core.NonEmptySet<arrow.core.Either<com.m2f.archer.failure.Failure,0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (com.m2f.archer.crud/Ice<#A1>).bind(): #A1 // com.m2f.archer.crud/ArcherRaise.bind|bind@com.m2f.archer.crud.Ice<0:0>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin.collections/Iterable<arrow.core/Either<com.m2f.archer.failure/Failure, #A1>>).bindAll(): kotlin.collections/List<#A1> // com.m2f.archer.crud/ArcherRaise.bindAll|bindAll@kotlin.collections.Iterable<arrow.core.Either<com.m2f.archer.failure.Failure,0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<com.m2f.archer.failure/Failure>, #A1>).bind(): #A1 // com.m2f.archer.crud/ArcherRaise.bind|bind@kotlin.Function1<arrow.core.raise.Raise<com.m2f.archer.failure.Failure>,0:0>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<com.m2f.archer.failure/Failure>, #A1>).invoke(): #A1 // com.m2f.archer.crud/ArcherRaise.invoke|invoke@kotlin.Function1<arrow.core.raise.Raise<com.m2f.archer.failure.Failure>,0:0>(){0§<kotlin.Any?>}[0]
    final fun raise(com.m2f.archer.failure/Failure): kotlin/Nothing // com.m2f.archer.crud/ArcherRaise.raise|raise(com.m2f.archer.failure.Failure){}[0]
    final suspend fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (com.m2f.archer.crud/GetRepositoryStrategy<#A1, #B1>).get(com.m2f.archer.crud.operation/Operation, #A1): #B1 // com.m2f.archer.crud/ArcherRaise.get|get@com.m2f.archer.crud.GetRepositoryStrategy<0:0,0:1>(com.m2f.archer.crud.operation.Operation;0:0){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/Get<#A1>, #B1>).get(#A1): #B1 // com.m2f.archer.crud/ArcherRaise.get|get@com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.Get<0:0>,0:1>(0:0){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/Put<#A1, out #B1>, #B1>).post(#A1): #B1 // com.m2f.archer.crud/ArcherRaise.post|post@com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.Put<0:0,out|0:1>,0:1>(0:0){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/Put<#A1, out #B1>, #B1>).put(#A1, #B1): #B1 // com.m2f.archer.crud/ArcherRaise.put|put@com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.Put<0:0,out|0:1>,0:1>(0:0;0:1){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (com.m2f.archer.repository/Repository<com.m2f.archer.failure/Failure, com.m2f.archer.query/Get<#A1>, #B1>).get(#A1): #B1 // com.m2f.archer.crud/ArcherRaise.get|get@com.m2f.archer.repository.Repository<com.m2f.archer.failure.Failure,com.m2f.archer.query.Get<0:0>,0:1>(0:0){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (com.m2f.archer.repository/Repository<com.m2f.archer.failure/Failure, com.m2f.archer.query/Put<#A1, #B1>, #B1>).put(#A1, #B1): #B1 // com.m2f.archer.crud/ArcherRaise.put|put@com.m2f.archer.repository.Repository<com.m2f.archer.failure.Failure,com.m2f.archer.query.Put<0:0,0:1>,0:1>(0:0;0:1){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?> (com.m2f.archer.crud/DeleteDataSource<#A1>).delete(#A1) // com.m2f.archer.crud/ArcherRaise.delete|delete@com.m2f.archer.crud.DeleteDataSource<0:0>(0:0){0§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?> (com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/Put<#A1, out kotlin/Unit>, kotlin/Unit>).put(#A1) // com.m2f.archer.crud/ArcherRaise.put|put@com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.Put<0:0,out|kotlin.Unit>,kotlin.Unit>(0:0){0§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?> (com.m2f.archer.repository/Repository<com.m2f.archer.failure/Failure, com.m2f.archer.query/Delete<#A1>, kotlin/Unit>).delete(#A1) // com.m2f.archer.crud/ArcherRaise.delete|delete@com.m2f.archer.repository.Repository<com.m2f.archer.failure.Failure,com.m2f.archer.query.Delete<0:0>,kotlin.Unit>(0:0){0§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?> (com.m2f.archer.repository/Repository<com.m2f.archer.failure/Failure, com.m2f.archer.query/Put<#A1, kotlin/Unit>, kotlin/Unit>).put(#A1) // com.m2f.archer.crud/ArcherRaise.put|put@com.m2f.archer.repository.Repository<com.m2f.archer.failure.Failure,com.m2f.archer.query.Put<0:0,kotlin.Unit>,kotlin.Unit>(0:0){0§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<com.m2f.archer.failure/Failure>, #A1>).bind(): #A1 // com.m2f.archer.crud/ArcherRaise.bind|bind@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<com.m2f.archer.failure.Failure>,0:0>(){0§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<com.m2f.archer.failure/Failure>, #A1>).invoke(): #A1 // com.m2f.archer.crud/ArcherRaise.invoke|invoke@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<com.m2f.archer.failure.Failure>,0:0>(){0§<kotlin.Any?>}[0]
    final suspend inline fun <#A1: kotlin/Any, #B1: reified kotlin/Any?> (com.m2f.archer.crud/GetRepositoryStrategy<#A1, #B1>).invalidate(#A1): #B1 // com.m2f.archer.crud/ArcherRaise.invalidate|invalidate@com.m2f.archer.crud.GetRepositoryStrategy<0:0,0:1>(0:0){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
    final val cache // com.m2f.archer.crud/ArcherRaise.cache|{}cache[0]
        final fun <get-cache>(): com.m2f.archer.crud.cache/CacheDataSource<com.m2f.archer.crud.cache.memcache/CacheMetaInformation, kotlinx.datetime/Instant> // com.m2f.archer.crud/ArcherRaise.cache.<get-cache>|<get-cache>(){}[0]
    final val mainFallbacks // com.m2f.archer.crud/ArcherRaise.mainFallbacks|{}mainFallbacks[0]
        final fun <get-mainFallbacks>(): kotlin/Function1<com.m2f.archer.failure/Failure, kotlin/Boolean> // com.m2f.archer.crud/ArcherRaise.mainFallbacks.<get-mainFallbacks>|<get-mainFallbacks>(){}[0]
    final val raise // com.m2f.archer.crud/ArcherRaise.raise|{}raise[0]
        final fun <get-raise>(): arrow.core.raise/Raise<com.m2f.archer.failure/Failure> // com.m2f.archer.crud/ArcherRaise.raise.<get-raise>|<get-raise>(){}[0]
    final val storageFallbacks // com.m2f.archer.crud/ArcherRaise.storageFallbacks|{}storageFallbacks[0]
        final fun <get-storageFallbacks>(): kotlin/Function1<com.m2f.archer.failure/Failure, kotlin/Boolean> // com.m2f.archer.crud/ArcherRaise.storageFallbacks.<get-storageFallbacks>|<get-storageFallbacks>(){}[0]
}
final class com.m2f.archer.failure/Unhandled : com.m2f.archer.failure/Failure { // com.m2f.archer.failure/Unhandled|null[0]
    constructor <init>(kotlin/Throwable) // com.m2f.archer.failure/Unhandled.<init>|<init>(kotlin.Throwable){}[0]
    final fun component1(): kotlin/Throwable // com.m2f.archer.failure/Unhandled.component1|component1(){}[0]
    final fun copy(kotlin/Throwable = ...): com.m2f.archer.failure/Unhandled // com.m2f.archer.failure/Unhandled.copy|copy(kotlin.Throwable){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.failure/Unhandled.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.m2f.archer.failure/Unhandled.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.m2f.archer.failure/Unhandled.toString|toString(){}[0]
    final val exception // com.m2f.archer.failure/Unhandled.exception|{}exception[0]
        final fun <get-exception>(): kotlin/Throwable // com.m2f.archer.failure/Unhandled.exception.<get-exception>|<get-exception>(){}[0]
}
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (com.m2f.archer.datasource/DataSource<#A, #B, #C>).com.m2f.archer.datasource.concurrency/mutex(): com.m2f.archer.datasource/DataSource<#A, #B, #C> // com.m2f.archer.datasource.concurrency/mutex|mutex@com.m2f.archer.datasource.DataSource<0:0,0:1,0:2>(){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (com.m2f.archer.datasource/DataSource<#A, #B, #C>).com.m2f.archer.datasource.concurrency/parallelism(kotlin/Int): com.m2f.archer.datasource/DataSource<#A, #B, #C> // com.m2f.archer.datasource.concurrency/parallelism|parallelism@com.m2f.archer.datasource.DataSource<0:0,0:1,0:2>(kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (com.m2f.archer.datasource/DataSource<#A, #B, #C>).com.m2f.archer.repository/toRepository(): com.m2f.archer.repository/Repository<#A, #B, #C> // com.m2f.archer.repository/toRepository|toRepository@com.m2f.archer.datasource.DataSource<0:0,0:1,0:2>(){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/KeyQuery<#A, out #B>, #B>).com.m2f.archer.mapper/map(com.m2f.archer.mapper/Bijection<#B, #C>): com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/KeyQuery<#A, out #C>, #C> // com.m2f.archer.mapper/map|map@com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.KeyQuery<0:0,out|0:1>,0:1>(com.m2f.archer.mapper.Bijection<0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/Put<#A, out #B>, #B>).com.m2f.archer.mapper/map(com.m2f.archer.mapper/Bijection<#B, #C>): com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/Put<#A, out #C>, #C> // com.m2f.archer.mapper/map|map@com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.Put<0:0,out|0:1>,0:1>(com.m2f.archer.mapper.Bijection<0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (com.m2f.archer.query/Put<#A, #B>).com.m2f.archer.query/map(kotlin/Function1<#B, #C>): com.m2f.archer.query/Put<#A, #C> // com.m2f.archer.query/map|map@com.m2f.archer.query.Put<0:0,0:1>(kotlin.Function1<0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (com.m2f.archer.crud/StrategyBuilder<#A, #B>).com.m2f.archer.crud.cache/build(com.m2f.archer.configuration/Configuration = ...): com.m2f.archer.crud/GetRepositoryStrategy<#A, #B> // com.m2f.archer.crud.cache/build|build@com.m2f.archer.crud.StrategyBuilder<0:0,0:1>(com.m2f.archer.configuration.Configuration){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/Get<#A>, #B>).com.m2f.archer.crud.cache/cacheWith(com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/KeyQuery<#A, out #B>, #B>): com.m2f.archer.crud/StrategyBuilder<#A, #B> // com.m2f.archer.crud.cache/cacheWith|cacheWith@com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.Get<0:0>,0:1>(com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.KeyQuery<0:0,out|0:1>,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/Get<#A>, #B>).com.m2f.archer.crud/fallbackWith(com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/KeyQuery<#A, out #B>, #B>): com.m2f.archer.repository/Repository<com.m2f.archer.failure/Failure, com.m2f.archer.query/Get<#A>, #B> // com.m2f.archer.crud/fallbackWith|fallbackWith@com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.Get<0:0>,0:1>(com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.KeyQuery<0:0,out|0:1>,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/Get<#A>, #B>).com.m2f.archer.crud/plus(com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/Put<#A, out #B>, #B>): com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/KeyQuery<#A, out #B>, #B> // com.m2f.archer.crud/plus|plus@com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.Get<0:0>,0:1>(com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.Put<0:0,out|0:1>,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> com.m2f.archer.crud/cacheStrategy(com.m2f.archer.configuration/Configuration = ..., com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/Get<#A>, #B>, com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/KeyQuery<#A, out #B>, #B>): com.m2f.archer.crud/GetRepositoryStrategy<#A, #B> // com.m2f.archer.crud/cacheStrategy|cacheStrategy(com.m2f.archer.configuration.Configuration;com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.Get<0:0>,0:1>;com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.KeyQuery<0:0,out|0:1>,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (com.m2f.archer.crud/DeleteDataSource<#A>).com.m2f.archer.repository/toDataSource(): com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/Delete<#A>, kotlin/Unit> // com.m2f.archer.repository/toDataSource|toDataSource@com.m2f.archer.crud.DeleteDataSource<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (com.m2f.archer.crud/DeleteDataSource<#A>).com.m2f.archer.repository/toDeleteRepository(): com.m2f.archer.repository/Repository<com.m2f.archer.failure/Failure, com.m2f.archer.query/Delete<#A>, kotlin/Unit> // com.m2f.archer.repository/toDeleteRepository|toDeleteRepository@com.m2f.archer.crud.DeleteDataSource<0:0>(){0§<kotlin.Any?>}[0]
final fun com.m2f.archer.failure.network/httpCodeToNetworkFailure(kotlin/Int): com.m2f.archer.failure/NetworkFailure // com.m2f.archer.failure.network/httpCodeToNetworkFailure|httpCodeToNetworkFailure(kotlin.Int){}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (com.m2f.archer.datasource/DataSource<#A, #B, #C>).com.m2f.archer.mapper/map(crossinline kotlin/Function1<#C, #D>): com.m2f.archer.datasource/DataSource<#A, #B, #D> // com.m2f.archer.mapper/map|map@com.m2f.archer.datasource.DataSource<0:0,0:1,0:2>(kotlin.Function1<0:2,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (com.m2f.archer.crud/Ice<#A>).com.m2f.archer.crud/fold(kotlin/Function0<#B>, kotlin/Function1<#A, #B>, kotlin/Function1<com.m2f.archer.failure/Failure, #B>): #B // com.m2f.archer.crud/fold|fold@com.m2f.archer.crud.Ice<0:0>(kotlin.Function0<0:1>;kotlin.Function1<0:0,0:1>;kotlin.Function1<com.m2f.archer.failure.Failure,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, #A, #B>).com.m2f.archer.crud.validate/validate(crossinline kotlin.coroutines/SuspendFunction1<#B, kotlin/Boolean>): com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, #A, #B> // com.m2f.archer.crud.validate/validate|validate@com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,0:0,0:1>(kotlin.coroutines.SuspendFunction1<0:1,kotlin.Boolean>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> com.m2f.archer.crud/getDataSource(crossinline kotlin.coroutines/SuspendFunction2<com.m2f.archer.crud/ArcherRaise, #A, #B>): com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/Get<#A>, #B> // com.m2f.archer.crud/getDataSource|getDataSource(kotlin.coroutines.SuspendFunction2<com.m2f.archer.crud.ArcherRaise,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> com.m2f.archer.crud/postDataSource(crossinline kotlin.coroutines/SuspendFunction2<com.m2f.archer.crud/ArcherRaise, #A, #B>): com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/Put<#A, out #B>, #B> // com.m2f.archer.crud/postDataSource|postDataSource(kotlin.coroutines.SuspendFunction2<com.m2f.archer.crud.ArcherRaise,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> com.m2f.archer.crud/putDataSource(crossinline kotlin.coroutines/SuspendFunction3<com.m2f.archer.crud/ArcherRaise, #A, #B, #B>): com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/Put<#A, out #B>, #B> // com.m2f.archer.crud/putDataSource|putDataSource(kotlin.coroutines.SuspendFunction3<com.m2f.archer.crud.ArcherRaise,0:0,0:1,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: reified kotlin/Any?> (com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/Get<#A>, #B>).com.m2f.archer.crud.cache/cache(com.m2f.archer.configuration/Configuration = ..., com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/KeyQuery<#A, out #B>, #B> = ..., com.m2f.archer.crud.cache/CacheExpiration = ...): com.m2f.archer.crud/GetRepositoryStrategy<#A, #B> // com.m2f.archer.crud.cache/cache|cache@com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.Get<0:0>,0:1>(com.m2f.archer.configuration.Configuration;com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.KeyQuery<0:0,out|0:1>,0:1>;com.m2f.archer.crud.cache.CacheExpiration){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: reified kotlin/Any?> (com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/KeyQuery<#A, out #B>, #B>).com.m2f.archer.crud.cache/expires(com.m2f.archer.configuration/Configuration = ..., com.m2f.archer.crud.cache/CacheExpiration): com.m2f.archer.datasource/DataSource<com.m2f.archer.failure/Failure, com.m2f.archer.query/KeyQuery<#A, out #B>, #B> // com.m2f.archer.crud.cache/expires|expires@com.m2f.archer.datasource.DataSource<com.m2f.archer.failure.Failure,com.m2f.archer.query.KeyQuery<0:0,out|0:1>,0:1>(com.m2f.archer.configuration.Configuration;com.m2f.archer.crud.cache.CacheExpiration){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (com.m2f.archer.configuration/Configuration).com.m2f.archer.crud/archerRecover(kotlin/Function1<com.m2f.archer.crud/ArcherRaise, #A>, kotlin/Function1<com.m2f.archer.failure/Failure, #A>): #A // com.m2f.archer.crud/archerRecover|archerRecover@com.m2f.archer.configuration.Configuration(kotlin.Function1<com.m2f.archer.crud.ArcherRaise,0:0>;kotlin.Function1<com.m2f.archer.failure.Failure,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (com.m2f.archer.configuration/Configuration).com.m2f.archer.crud/archerRecover(kotlin/Function1<com.m2f.archer.crud/ArcherRaise, #A>, kotlin/Function1<com.m2f.archer.failure/Failure, #A>, kotlin/Function1<kotlin/Throwable, #A>): #A // com.m2f.archer.crud/archerRecover|archerRecover@com.m2f.archer.configuration.Configuration(kotlin.Function1<com.m2f.archer.crud.ArcherRaise,0:0>;kotlin.Function1<com.m2f.archer.failure.Failure,0:0>;kotlin.Function1<kotlin.Throwable,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> com.m2f.archer.crud/bool(com.m2f.archer.configuration/Configuration = ..., kotlin/Function1<com.m2f.archer.crud/ArcherRaise, #A>): kotlin/Boolean // com.m2f.archer.crud/bool|bool(com.m2f.archer.configuration.Configuration;kotlin.Function1<com.m2f.archer.crud.ArcherRaise,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> com.m2f.archer.crud/deleteDataSource(crossinline kotlin.coroutines/SuspendFunction2<com.m2f.archer.crud/ArcherRaise, #A, kotlin/Unit>): com.m2f.archer.crud/DeleteDataSource<#A> // com.m2f.archer.crud/deleteDataSource|deleteDataSource(kotlin.coroutines.SuspendFunction2<com.m2f.archer.crud.ArcherRaise,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> com.m2f.archer.crud/either(com.m2f.archer.configuration/Configuration = ..., kotlin/Function1<com.m2f.archer.crud/ArcherRaise, #A>): arrow.core/Either<com.m2f.archer.failure/Failure, #A> // com.m2f.archer.crud/either|either(com.m2f.archer.configuration.Configuration;kotlin.Function1<com.m2f.archer.crud.ArcherRaise,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> com.m2f.archer.crud/ice(com.m2f.archer.configuration/Configuration = ..., kotlin/Function1<com.m2f.archer.crud/ArcherRaise, #A>): com.m2f.archer.crud/Ice<#A> // com.m2f.archer.crud/ice|ice(com.m2f.archer.configuration.Configuration;kotlin.Function1<com.m2f.archer.crud.ArcherRaise,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> com.m2f.archer.crud/nil(com.m2f.archer.configuration/Configuration = ..., kotlin/Function1<com.m2f.archer.crud/ArcherRaise, #A>): #A? // com.m2f.archer.crud/nil|nil(com.m2f.archer.configuration.Configuration;kotlin.Function1<com.m2f.archer.crud.ArcherRaise,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> com.m2f.archer.crud/nullable(com.m2f.archer.configuration/Configuration = ..., kotlin/Function1<com.m2f.archer.crud/ArcherRaise, #A>): #A? // com.m2f.archer.crud/nullable|nullable(com.m2f.archer.configuration.Configuration;kotlin.Function1<com.m2f.archer.crud.ArcherRaise,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> com.m2f.archer.crud/option(com.m2f.archer.configuration/Configuration = ..., kotlin/Function1<com.m2f.archer.crud/ArcherRaise, #A>): arrow.core/Option<#A> // com.m2f.archer.crud/option|option(com.m2f.archer.configuration.Configuration;kotlin.Function1<com.m2f.archer.crud.ArcherRaise,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> com.m2f.archer.crud/result(com.m2f.archer.configuration/Configuration = ..., kotlin/Function1<com.m2f.archer.crud/ArcherRaise, #A>): arrow.core/Either<com.m2f.archer.failure/Failure, #A> // com.m2f.archer.crud/result|result(com.m2f.archer.configuration.Configuration;kotlin.Function1<com.m2f.archer.crud.ArcherRaise,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> com.m2f.archer.crud/unit(com.m2f.archer.configuration/Configuration = ..., kotlin/Function1<com.m2f.archer.crud/ArcherRaise, #A>) // com.m2f.archer.crud/unit|unit(com.m2f.archer.configuration.Configuration;kotlin.Function1<com.m2f.archer.crud.ArcherRaise,0:0>){0§<kotlin.Any?>}[0]
final object com.m2f.archer.configuration/DefaultConfiguration : com.m2f.archer.configuration/Configuration { // com.m2f.archer.configuration/DefaultConfiguration|null[0]
    final val cache // com.m2f.archer.configuration/DefaultConfiguration.cache|{}cache[0]
        final fun <get-cache>(): com.m2f.archer.crud.cache/CacheDataSource<com.m2f.archer.crud.cache.memcache/CacheMetaInformation, kotlinx.datetime/Instant> // com.m2f.archer.configuration/DefaultConfiguration.cache.<get-cache>|<get-cache>(){}[0]
    final val mainFallbacks // com.m2f.archer.configuration/DefaultConfiguration.mainFallbacks|{}mainFallbacks[0]
        final fun <get-mainFallbacks>(): kotlin/Function1<com.m2f.archer.failure/Failure, kotlin/Boolean> // com.m2f.archer.configuration/DefaultConfiguration.mainFallbacks.<get-mainFallbacks>|<get-mainFallbacks>(){}[0]
    final val storageFallbacks // com.m2f.archer.configuration/DefaultConfiguration.storageFallbacks|{}storageFallbacks[0]
        final fun <get-storageFallbacks>(): kotlin/Function1<com.m2f.archer.failure/Failure, kotlin/Boolean> // com.m2f.archer.configuration/DefaultConfiguration.storageFallbacks.<get-storageFallbacks>|<get-storageFallbacks>(){}[0]
}
final object com.m2f.archer.crud.operation/Main : com.m2f.archer.crud.operation/Operation { // com.m2f.archer.crud.operation/Main|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.crud.operation/Main.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.m2f.archer.crud.operation/Main.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.m2f.archer.crud.operation/Main.toString|toString(){}[0]
}
final object com.m2f.archer.crud.operation/MainSync : com.m2f.archer.crud.operation/Operation { // com.m2f.archer.crud.operation/MainSync|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.crud.operation/MainSync.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.m2f.archer.crud.operation/MainSync.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.m2f.archer.crud.operation/MainSync.toString|toString(){}[0]
}
final object com.m2f.archer.crud.operation/Store : com.m2f.archer.crud.operation/Operation { // com.m2f.archer.crud.operation/Store|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.crud.operation/Store.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.m2f.archer.crud.operation/Store.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.m2f.archer.crud.operation/Store.toString|toString(){}[0]
}
final object com.m2f.archer.crud.operation/StoreSync : com.m2f.archer.crud.operation/Operation { // com.m2f.archer.crud.operation/StoreSync|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.crud.operation/StoreSync.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.m2f.archer.crud.operation/StoreSync.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.m2f.archer.crud.operation/StoreSync.toString|toString(){}[0]
}
final object com.m2f.archer.failure/DataEmpty : com.m2f.archer.failure/Failure { // com.m2f.archer.failure/DataEmpty|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.failure/DataEmpty.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.m2f.archer.failure/DataEmpty.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.m2f.archer.failure/DataEmpty.toString|toString(){}[0]
}
final object com.m2f.archer.failure/DataNotFound : com.m2f.archer.failure/Failure { // com.m2f.archer.failure/DataNotFound|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.failure/DataNotFound.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.m2f.archer.failure/DataNotFound.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.m2f.archer.failure/DataNotFound.toString|toString(){}[0]
}
final object com.m2f.archer.failure/Idle : com.m2f.archer.failure/Failure { // com.m2f.archer.failure/Idle|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.failure/Idle.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.m2f.archer.failure/Idle.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.m2f.archer.failure/Idle.toString|toString(){}[0]
}
final object com.m2f.archer.failure/Invalid : com.m2f.archer.failure/Failure { // com.m2f.archer.failure/Invalid|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.failure/Invalid.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.m2f.archer.failure/Invalid.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.m2f.archer.failure/Invalid.toString|toString(){}[0]
}
final object com.m2f.archer.failure/Unknown : com.m2f.archer.failure/Failure { // com.m2f.archer.failure/Unknown|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.failure/Unknown.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.m2f.archer.failure/Unknown.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.m2f.archer.failure/Unknown.toString|toString(){}[0]
}
final suspend inline fun <#A: reified kotlin/Any?> (com.m2f.archer.crud/ArcherRaise).com.m2f.archer.crud.cache/invalidateCache(kotlin/Any) // com.m2f.archer.crud.cache/invalidateCache|invalidateCache@com.m2f.archer.crud.ArcherRaise(kotlin.Any){0§<kotlin.Any?>}[0]
final val com.m2f.archer.crud.cache.memcache.deps/queriesRepo // com.m2f.archer.crud.cache.memcache.deps/queriesRepo|{}queriesRepo[0]
    final fun <get-queriesRepo>(): com.m2f.archer.repository/Repository<com.m2f.archer.failure/Failure, com.m2f.archer.query/Get<kotlin/Unit>, com.m2f.archer/ExpirationRegistryQueries> // com.m2f.archer.crud.cache.memcache.deps/queriesRepo.<get-queriesRepo>|<get-queriesRepo>(){}[0]
sealed class <#A: kotlin/Any?, #B: kotlin/Any?> com.m2f.archer.query/KeyQuery : com.m2f.archer.query/Query<#B> { // com.m2f.archer.query/KeyQuery|null[0]
    constructor <init>(#A) // com.m2f.archer.query/KeyQuery.<init>|<init>(1:0){}[0]
    open val key // com.m2f.archer.query/KeyQuery.key|{}key[0]
        open fun <get-key>(): #A // com.m2f.archer.query/KeyQuery.key.<get-key>|<get-key>(){}[0]
}
sealed class com.m2f.archer.failure/Message { // com.m2f.archer.failure/Message|null[0]
    constructor <init>(kotlin/String) // com.m2f.archer.failure/Message.<init>|<init>(kotlin.String){}[0]
    final class NetworkCodeAndTitleMessage : com.m2f.archer.failure/Message { // com.m2f.archer.failure/Message.NetworkCodeAndTitleMessage|null[0]
        constructor <init>(kotlin/String, kotlin/String, kotlin/String) // com.m2f.archer.failure/Message.NetworkCodeAndTitleMessage.<init>|<init>(kotlin.String;kotlin.String;kotlin.String){}[0]
        final fun component1(): kotlin/String // com.m2f.archer.failure/Message.NetworkCodeAndTitleMessage.component1|component1(){}[0]
        final fun component2(): kotlin/String // com.m2f.archer.failure/Message.NetworkCodeAndTitleMessage.component2|component2(){}[0]
        final fun component3(): kotlin/String // com.m2f.archer.failure/Message.NetworkCodeAndTitleMessage.component3|component3(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String = ..., kotlin/String = ...): com.m2f.archer.failure/Message.NetworkCodeAndTitleMessage // com.m2f.archer.failure/Message.NetworkCodeAndTitleMessage.copy|copy(kotlin.String;kotlin.String;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.failure/Message.NetworkCodeAndTitleMessage.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.m2f.archer.failure/Message.NetworkCodeAndTitleMessage.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.m2f.archer.failure/Message.NetworkCodeAndTitleMessage.toString|toString(){}[0]
        final val code // com.m2f.archer.failure/Message.NetworkCodeAndTitleMessage.code|{}code[0]
            final fun <get-code>(): kotlin/String // com.m2f.archer.failure/Message.NetworkCodeAndTitleMessage.code.<get-code>|<get-code>(){}[0]
        final val message // com.m2f.archer.failure/Message.NetworkCodeAndTitleMessage.message|{}message[0]
            final fun <get-message>(): kotlin/String // com.m2f.archer.failure/Message.NetworkCodeAndTitleMessage.message.<get-message>|<get-message>(){}[0]
        final val title // com.m2f.archer.failure/Message.NetworkCodeAndTitleMessage.title|{}title[0]
            final fun <get-title>(): kotlin/String // com.m2f.archer.failure/Message.NetworkCodeAndTitleMessage.title.<get-title>|<get-title>(){}[0]
    }
    final class NetworkCodeMessage : com.m2f.archer.failure/Message { // com.m2f.archer.failure/Message.NetworkCodeMessage|null[0]
        constructor <init>(kotlin/String, kotlin/String) // com.m2f.archer.failure/Message.NetworkCodeMessage.<init>|<init>(kotlin.String;kotlin.String){}[0]
        final fun component1(): kotlin/String // com.m2f.archer.failure/Message.NetworkCodeMessage.component1|component1(){}[0]
        final fun component2(): kotlin/String // com.m2f.archer.failure/Message.NetworkCodeMessage.component2|component2(){}[0]
        final fun copy(kotlin/String = ..., kotlin/String = ...): com.m2f.archer.failure/Message.NetworkCodeMessage // com.m2f.archer.failure/Message.NetworkCodeMessage.copy|copy(kotlin.String;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.failure/Message.NetworkCodeMessage.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.m2f.archer.failure/Message.NetworkCodeMessage.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.m2f.archer.failure/Message.NetworkCodeMessage.toString|toString(){}[0]
        final val code // com.m2f.archer.failure/Message.NetworkCodeMessage.code|{}code[0]
            final fun <get-code>(): kotlin/String // com.m2f.archer.failure/Message.NetworkCodeMessage.code.<get-code>|<get-code>(){}[0]
        final val message // com.m2f.archer.failure/Message.NetworkCodeMessage.message|{}message[0]
            final fun <get-message>(): kotlin/String // com.m2f.archer.failure/Message.NetworkCodeMessage.message.<get-message>|<get-message>(){}[0]
    }
    final class Simple : com.m2f.archer.failure/Message { // com.m2f.archer.failure/Message.Simple|null[0]
        constructor <init>(kotlin/String) // com.m2f.archer.failure/Message.Simple.<init>|<init>(kotlin.String){}[0]
        final fun component1(): kotlin/String // com.m2f.archer.failure/Message.Simple.component1|component1(){}[0]
        final fun copy(kotlin/String = ...): com.m2f.archer.failure/Message.Simple // com.m2f.archer.failure/Message.Simple.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.failure/Message.Simple.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.m2f.archer.failure/Message.Simple.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.m2f.archer.failure/Message.Simple.toString|toString(){}[0]
        final val message // com.m2f.archer.failure/Message.Simple.message|{}message[0]
            final fun <get-message>(): kotlin/String // com.m2f.archer.failure/Message.Simple.message.<get-message>|<get-message>(){}[0]
    }
    open val message // com.m2f.archer.failure/Message.message|{}message[0]
        open fun <get-message>(): kotlin/String // com.m2f.archer.failure/Message.message.<get-message>|<get-message>(){}[0]
}
sealed interface <#A: kotlin/Any?> com.m2f.archer.query/Query // com.m2f.archer.query/Query|null[0]
sealed interface <#A: out kotlin/Any?, #B: in kotlin/Any?, #C: out kotlin/Any?> com.m2f.archer.repository/Repository { // com.m2f.archer.repository/Repository|null[0]
    abstract suspend fun (com.m2f.archer.crud/ArcherRaise).invoke(#B): #C // com.m2f.archer.repository/Repository.invoke|invoke@com.m2f.archer.crud.ArcherRaise(1:1){}[0]
}
sealed interface <#A: out kotlin/Any?> com.m2f.archer.crud/Ice { // com.m2f.archer.crud/Ice|null[0]
    final class <#A1: kotlin/Any?> Content : com.m2f.archer.crud/Ice<#A1> { // com.m2f.archer.crud/Ice.Content|null[0]
        constructor <init>(#A1) // com.m2f.archer.crud/Ice.Content.<init>|<init>(1:0){}[0]
        final fun component1(): #A1 // com.m2f.archer.crud/Ice.Content.component1|component1(){}[0]
        final fun copy(#A1 = ...): com.m2f.archer.crud/Ice.Content<#A1> // com.m2f.archer.crud/Ice.Content.copy|copy(1:0){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.crud/Ice.Content.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.m2f.archer.crud/Ice.Content.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.m2f.archer.crud/Ice.Content.toString|toString(){}[0]
        final val value // com.m2f.archer.crud/Ice.Content.value|{}value[0]
            final fun <get-value>(): #A1 // com.m2f.archer.crud/Ice.Content.value.<get-value>|<get-value>(){}[0]
    }
    final class Error : com.m2f.archer.crud/Ice<kotlin/Nothing> { // com.m2f.archer.crud/Ice.Error|null[0]
        constructor <init>(com.m2f.archer.failure/Failure) // com.m2f.archer.crud/Ice.Error.<init>|<init>(com.m2f.archer.failure.Failure){}[0]
        final fun component1(): com.m2f.archer.failure/Failure // com.m2f.archer.crud/Ice.Error.component1|component1(){}[0]
        final fun copy(com.m2f.archer.failure/Failure = ...): com.m2f.archer.crud/Ice.Error // com.m2f.archer.crud/Ice.Error.copy|copy(com.m2f.archer.failure.Failure){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.crud/Ice.Error.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.m2f.archer.crud/Ice.Error.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.m2f.archer.crud/Ice.Error.toString|toString(){}[0]
        final val error // com.m2f.archer.crud/Ice.Error.error|{}error[0]
            final fun <get-error>(): com.m2f.archer.failure/Failure // com.m2f.archer.crud/Ice.Error.error.<get-error>|<get-error>(){}[0]
    }
    final object Idle : com.m2f.archer.crud/Ice<kotlin/Nothing> { // com.m2f.archer.crud/Ice.Idle|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.crud/Ice.Idle.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.m2f.archer.crud/Ice.Idle.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.m2f.archer.crud/Ice.Idle.toString|toString(){}[0]
    }
}
sealed interface com.m2f.archer.crud.cache/CacheExpiration { // com.m2f.archer.crud.cache/CacheExpiration|null[0]
    final class After : com.m2f.archer.crud.cache/CacheExpiration { // com.m2f.archer.crud.cache/CacheExpiration.After|null[0]
        constructor <init>(kotlin.time/Duration) // com.m2f.archer.crud.cache/CacheExpiration.After.<init>|<init>(kotlin.time.Duration){}[0]
        final fun component1(): kotlin.time/Duration // com.m2f.archer.crud.cache/CacheExpiration.After.component1|component1(){}[0]
        final fun copy(kotlin.time/Duration = ...): com.m2f.archer.crud.cache/CacheExpiration.After // com.m2f.archer.crud.cache/CacheExpiration.After.copy|copy(kotlin.time.Duration){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.crud.cache/CacheExpiration.After.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.m2f.archer.crud.cache/CacheExpiration.After.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.m2f.archer.crud.cache/CacheExpiration.After.toString|toString(){}[0]
        final val time // com.m2f.archer.crud.cache/CacheExpiration.After.time|{}time[0]
            final fun <get-time>(): kotlin.time/Duration // com.m2f.archer.crud.cache/CacheExpiration.After.time.<get-time>|<get-time>(){}[0]
    }
    final object Always : com.m2f.archer.crud.cache/CacheExpiration { // com.m2f.archer.crud.cache/CacheExpiration.Always|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.crud.cache/CacheExpiration.Always.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.m2f.archer.crud.cache/CacheExpiration.Always.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.m2f.archer.crud.cache/CacheExpiration.Always.toString|toString(){}[0]
    }
    final object Never : com.m2f.archer.crud.cache/CacheExpiration { // com.m2f.archer.crud.cache/CacheExpiration.Never|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.crud.cache/CacheExpiration.Never.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.m2f.archer.crud.cache/CacheExpiration.Never.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.m2f.archer.crud.cache/CacheExpiration.Never.toString|toString(){}[0]
    }
}
sealed interface com.m2f.archer.crud.operation/Operation // com.m2f.archer.crud.operation/Operation|null[0]
sealed interface com.m2f.archer.failure/Failure // com.m2f.archer.failure/Failure|null[0]
sealed interface com.m2f.archer.failure/NetworkFailure : com.m2f.archer.failure/Failure { // com.m2f.archer.failure/NetworkFailure|null[0]
    final class NetworkError : com.m2f.archer.failure/NetworkFailure { // com.m2f.archer.failure/NetworkFailure.NetworkError|null[0]
        constructor <init>(com.m2f.archer.failure/Message? = ...) // com.m2f.archer.failure/NetworkFailure.NetworkError.<init>|<init>(com.m2f.archer.failure.Message?){}[0]
        final fun component1(): com.m2f.archer.failure/Message? // com.m2f.archer.failure/NetworkFailure.NetworkError.component1|component1(){}[0]
        final fun copy(com.m2f.archer.failure/Message? = ...): com.m2f.archer.failure/NetworkFailure.NetworkError // com.m2f.archer.failure/NetworkFailure.NetworkError.copy|copy(com.m2f.archer.failure.Message?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.failure/NetworkFailure.NetworkError.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.m2f.archer.failure/NetworkFailure.NetworkError.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.m2f.archer.failure/NetworkFailure.NetworkError.toString|toString(){}[0]
        final val message // com.m2f.archer.failure/NetworkFailure.NetworkError.message|{}message[0]
            final fun <get-message>(): com.m2f.archer.failure/Message? // com.m2f.archer.failure/NetworkFailure.NetworkError.message.<get-message>|<get-message>(){}[0]
    }
    final object NoConnection : com.m2f.archer.failure/NetworkFailure { // com.m2f.archer.failure/NetworkFailure.NoConnection|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.failure/NetworkFailure.NoConnection.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.m2f.archer.failure/NetworkFailure.NoConnection.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.m2f.archer.failure/NetworkFailure.NoConnection.toString|toString(){}[0]
    }
    final object Redirect : com.m2f.archer.failure/NetworkFailure { // com.m2f.archer.failure/NetworkFailure.Redirect|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.failure/NetworkFailure.Redirect.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.m2f.archer.failure/NetworkFailure.Redirect.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.m2f.archer.failure/NetworkFailure.Redirect.toString|toString(){}[0]
    }
    final object ServerFailure : com.m2f.archer.failure/NetworkFailure { // com.m2f.archer.failure/NetworkFailure.ServerFailure|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.failure/NetworkFailure.ServerFailure.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.m2f.archer.failure/NetworkFailure.ServerFailure.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.m2f.archer.failure/NetworkFailure.ServerFailure.toString|toString(){}[0]
    }
    final object Unauthorised : com.m2f.archer.failure/NetworkFailure { // com.m2f.archer.failure/NetworkFailure.Unauthorised|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.failure/NetworkFailure.Unauthorised.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.m2f.archer.failure/NetworkFailure.Unauthorised.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.m2f.archer.failure/NetworkFailure.Unauthorised.toString|toString(){}[0]
    }
    final object UnhandledNetworkFailure : com.m2f.archer.failure/NetworkFailure { // com.m2f.archer.failure/NetworkFailure.UnhandledNetworkFailure|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer.failure/NetworkFailure.UnhandledNetworkFailure.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.m2f.archer.failure/NetworkFailure.UnhandledNetworkFailure.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.m2f.archer.failure/NetworkFailure.UnhandledNetworkFailure.toString|toString(){}[0]
    }
}

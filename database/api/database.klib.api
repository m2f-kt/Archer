// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <com.m2f-kt:database>
abstract interface com.m2f.archer.sqldelight/CacheExpirationDatabase : app.cash.sqldelight/SuspendingTransacter { // com.m2f.archer.sqldelight/CacheExpirationDatabase|null[0]
    abstract val expirationRegistryQueries // com.m2f.archer.sqldelight/CacheExpirationDatabase.expirationRegistryQueries|{}expirationRegistryQueries[0]
        abstract fun <get-expirationRegistryQueries>(): com.m2f.archer/ExpirationRegistryQueries // com.m2f.archer.sqldelight/CacheExpirationDatabase.expirationRegistryQueries.<get-expirationRegistryQueries>|<get-expirationRegistryQueries>(){}[0]

    final object Companion { // com.m2f.archer.sqldelight/CacheExpirationDatabase.Companion|null[0]
        final val Schema // com.m2f.archer.sqldelight/CacheExpirationDatabase.Companion.Schema|{}Schema[0]
            final fun <get-Schema>(): app.cash.sqldelight.db/SqlSchema<app.cash.sqldelight.db/QueryResult.AsyncValue<kotlin/Unit>> // com.m2f.archer.sqldelight/CacheExpirationDatabase.Companion.Schema.<get-Schema>|<get-Schema>(){}[0]

        final fun invoke(app.cash.sqldelight.db/SqlDriver): com.m2f.archer.sqldelight/CacheExpirationDatabase // com.m2f.archer.sqldelight/CacheExpirationDatabase.Companion.invoke|invoke(app.cash.sqldelight.db.SqlDriver){}[0]
    }
}

final class com.m2f.archer.data.storage/DatabaseDriverFactory { // com.m2f.archer.data.storage/DatabaseDriverFactory|null[0]
    constructor <init>() // com.m2f.archer.data.storage/DatabaseDriverFactory.<init>|<init>(){}[0]

    final object Companion { // com.m2f.archer.data.storage/DatabaseDriverFactory.Companion|null[0]
        final suspend fun createDriver(app.cash.sqldelight.db/SqlSchema<app.cash.sqldelight.db/QueryResult.AsyncValue<kotlin/Unit>>): app.cash.sqldelight.db/SqlDriver // com.m2f.archer.data.storage/DatabaseDriverFactory.Companion.createDriver|createDriver(app.cash.sqldelight.db.SqlSchema<app.cash.sqldelight.db.QueryResult.AsyncValue<kotlin.Unit>>){}[0]
    }
}

final class com.m2f.archer/ExpirationRegistry { // com.m2f.archer/ExpirationRegistry|null[0]
    constructor <init>(kotlin/String, kotlin/Long, kotlin/String, kotlin/String, kotlin/String) // com.m2f.archer/ExpirationRegistry.<init>|<init>(kotlin.String;kotlin.Long;kotlin.String;kotlin.String;kotlin.String){}[0]

    final val hash // com.m2f.archer/ExpirationRegistry.hash|{}hash[0]
        final fun <get-hash>(): kotlin/Long // com.m2f.archer/ExpirationRegistry.hash.<get-hash>|<get-hash>(){}[0]
    final val instant // com.m2f.archer/ExpirationRegistry.instant|{}instant[0]
        final fun <get-instant>(): kotlin/String // com.m2f.archer/ExpirationRegistry.instant.<get-instant>|<get-instant>(){}[0]
    final val key // com.m2f.archer/ExpirationRegistry.key|{}key[0]
        final fun <get-key>(): kotlin/String // com.m2f.archer/ExpirationRegistry.key.<get-key>|<get-key>(){}[0]
    final val name // com.m2f.archer/ExpirationRegistry.name|{}name[0]
        final fun <get-name>(): kotlin/String // com.m2f.archer/ExpirationRegistry.name.<get-name>|<get-name>(){}[0]
    final val whenCreated // com.m2f.archer/ExpirationRegistry.whenCreated|{}whenCreated[0]
        final fun <get-whenCreated>(): kotlin/String // com.m2f.archer/ExpirationRegistry.whenCreated.<get-whenCreated>|<get-whenCreated>(){}[0]

    final fun component1(): kotlin/String // com.m2f.archer/ExpirationRegistry.component1|component1(){}[0]
    final fun component2(): kotlin/Long // com.m2f.archer/ExpirationRegistry.component2|component2(){}[0]
    final fun component3(): kotlin/String // com.m2f.archer/ExpirationRegistry.component3|component3(){}[0]
    final fun component4(): kotlin/String // com.m2f.archer/ExpirationRegistry.component4|component4(){}[0]
    final fun component5(): kotlin/String // com.m2f.archer/ExpirationRegistry.component5|component5(){}[0]
    final fun copy(kotlin/String = ..., kotlin/Long = ..., kotlin/String = ..., kotlin/String = ..., kotlin/String = ...): com.m2f.archer/ExpirationRegistry // com.m2f.archer/ExpirationRegistry.copy|copy(kotlin.String;kotlin.Long;kotlin.String;kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.m2f.archer/ExpirationRegistry.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.m2f.archer/ExpirationRegistry.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.m2f.archer/ExpirationRegistry.toString|toString(){}[0]
}

final class com.m2f.archer/ExpirationRegistryQueries : app.cash.sqldelight/SuspendingTransacterImpl { // com.m2f.archer/ExpirationRegistryQueries|null[0]
    constructor <init>(app.cash.sqldelight.db/SqlDriver) // com.m2f.archer/ExpirationRegistryQueries.<init>|<init>(app.cash.sqldelight.db.SqlDriver){}[0]

    final fun <#A1: kotlin/Any> getInstant(kotlin/String, kotlin/Long, kotlin/Function5<kotlin/String, kotlin/Long, kotlin/String, kotlin/String, kotlin/String, #A1>): app.cash.sqldelight/Query<#A1> // com.m2f.archer/ExpirationRegistryQueries.getInstant|getInstant(kotlin.String;kotlin.Long;kotlin.Function5<kotlin.String,kotlin.Long,kotlin.String,kotlin.String,kotlin.String,0:0>){0ยง<kotlin.Any>}[0]
    final fun getInstant(kotlin/String, kotlin/Long): app.cash.sqldelight/Query<com.m2f.archer/ExpirationRegistry> // com.m2f.archer/ExpirationRegistryQueries.getInstant|getInstant(kotlin.String;kotlin.Long){}[0]
    final suspend fun deleteInstant(kotlin/String, kotlin/Long): kotlin/Long // com.m2f.archer/ExpirationRegistryQueries.deleteInstant|deleteInstant(kotlin.String;kotlin.Long){}[0]
    final suspend fun insertInstant(kotlin/String, kotlin/Long, kotlin/String, kotlin/String, kotlin/String): kotlin/Long // com.m2f.archer/ExpirationRegistryQueries.insertInstant|insertInstant(kotlin.String;kotlin.Long;kotlin.String;kotlin.String;kotlin.String){}[0]
}
